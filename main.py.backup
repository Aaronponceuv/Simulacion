"""from tkinter import *

master = Tk()

var = StringVar(master)
var.set("one") # initial value

option = OptionMenu(master, var, "one", "two", "three", "four")
option.pack()

#
# test stuff

def ok():
    print("value is", var.get())
    master.quit()

button = Button(master, text="OK", command=ok)
button.pack()

mainloop()"""
import tkinter as tk

from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
import numpy as np

import numpy as np
import matplotlib.pyplot as plt
from time import time
N = 100000

class Page(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
    def show(self):
        self.lift()

class Page1(Page):

   def __init__(self, *args, **kwargs):
       Page.__init__(self, *args, **kwargs)

       #Elementos
       label = tk.Label(self, text="--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
       label.pack(side="top")
       label_text = tk.Label(self,text="Ingrese el Valor de lamda")
       label_text.pack(side="top")
       entry = tk.Entry(self)
       def random(ciclo):
  
            X = []
            a = 16807
            m = (2**31) -(1)
            b = 0
            Xn = time() #semilla (debe cambiar para generar la Erlang, no se me ocurrio otro metodo para hacerla variar)

            def formula(a,b,Xn):
                return ((a*Xn+b)%m)

            def aleatorio(Xn1,m):
                return Xn1/m

            for i in range(ciclo):
                Xn1 = formula(a,b,Xn)
                ri = aleatorio(Xn1,m)
                X.append(ri)
                Xn = Xn1  
            return X
       def exponencial(lam):
            X = []
            U = random(N)
            for i in range(N):
                X.append(np.log(U[i])/(-lam))
            return(X)
       def test():
            print(type(entry.get()))
      
       simular = tk.Button(self, text="Simular",command=test)
       entry.pack()

      
       simular.pack()
       

       fig = Figure(figsize=(2, 2), dpi=100)
       t = np.arange(0, 3, .01)
       x = exponencial(10)
       fig.add_subplot(111).hist(x, bins=20)

       canvas = FigureCanvasTkAgg(fig, master=root)  # A tk.DrawingArea.
       canvas.draw()
       canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

       toolbar = NavigationToolbar2Tk(canvas, root)
       toolbar.update()
       canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)



class Page2(Page):
   def __init__(self, *args, **kwargs):
       Page.__init__(self, *args, **kwargs)
       label = tk.Label(self, text="Distribucion Erlang")
       label.pack(side="top", fill="both", expand=True)

class Page3(Page):
   def __init__(self, *args, **kwargs): 
       Page.__init__(self, *args, **kwargs)
       label = tk.Label(self, text="Distribucion Normal")
       label.pack(side="top", fill="both", expand=True)

class Page4(Page):
   def __init__(self, *args, **kwargs):
       Page.__init__(self, *args, **kwargs)
       label = tk.Label(self, text="Distribucion Uniforme Continua")
       label.pack(side="top", fill="both", expand=True)

class Page5(Page):
   def __init__(self, *args, **kwargs):
       Page.__init__(self, *args, **kwargs)
       label = tk.Label(self, text="Distribucion Binomial")
       label.pack(side="top", fill="both", expand=True)

class Page6(Page):
   def __init__(self, *args, **kwargs):
       Page.__init__(self, *args, **kwargs)
       label = tk.Label(self, text="Distribucion Poisson")
       label.pack(side="top", fill="both", expand=True)

class Page7(Page):
   def __init__(self, *args, **kwargs):
       Page.__init__(self, *args, **kwargs)
       label = tk.Label(self, text="Distribucion Geometrica")
       label.pack(side="top", fill="both", expand=True)

class MainView(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        label = tk.Label(text="Distribuciones")
        label.place()
        p1 = Page1(self)
        p2 = Page2(self)
        p3 = Page3(self)
        p4 = Page4(self)
        p5 = Page5(self)
        p6 = Page6(self)
        p7 = Page7(self)

        buttonframe = tk.Frame(self)
        container = tk.Frame(self)
        buttonframe.pack(side="top", fill="x", expand=False)
        container.pack(side="top", fill="both", expand=True)

        p1.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p2.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p3.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p4.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p5.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p6.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p7.place(in_=container, x=0, y=0, relwidth=1, relheight=1)

        b1 = tk.Button(buttonframe, text="Distribucion Exponencial", command=p1.lift)
        b2 = tk.Button(buttonframe, text="Distribucion Erlang", command=p2.lift)
        b3 = tk.Button(buttonframe, text="Distribucion Normal", command=p3.lift)
        b4 = tk.Button(buttonframe, text="Distribucion Unifome Continua", command=p4.lift)
        b5 = tk.Button(buttonframe, text="Distribucion Binomial", command=p5.lift)
        b6 = tk.Button(buttonframe, text="Distribucion Unifome Continua", command=p6.lift)
        b7 = tk.Button(buttonframe, text="Distribucion Binomial", command=p7.lift)

        b1.pack(side="left")
        b2.pack(side="left")
        b3.pack(side="left")
        b4.pack(side="left")
        b5.pack(side="left")
        b6.pack(side="left")
        b7.pack(side="left")

        p1.show()

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Simulador de Numeros Aleatorios")
    main = MainView(root)

    main.pack(side="top", fill="both", expand=True)
    root.wm_geometry("1200x500")
    root.mainloop()